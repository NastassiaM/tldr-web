Основная нагрузка в системе ожидается на чтение (т.е. просмотр справки по команде). Поэтому сервис хотелось бы сделать всегда доступным на чтение.
Если же взглянуть на операции модификации (одновременное добавление новой / редактирование существующей страницы несколькими пользователями), то тут есть два варианта:
а) обеспечить консистентность (т.е. не давать возможности писать в момент распада системы + перед отправкой делать запрос на чтение и давать пользователю возможность исправить мерж-конфликты, если кто-то уже успел что-то изменить на этой странице);
б) обеспечить доступность, а мерж-конфликты решать по принципу "кто последний тот и прав" (напр. хранить временные отметки изменений).

Т.к. сервис задуман как глобальная база данных, которую составляют ответственные пользователи без всякой модерации, то, в целом, нас вполне устроит второй вариант (то есть AP система). Т.е. если кто-то затрет мои изменения - это не критично (ведь это всего лишь справка). К тому же операций записи ожидается относительно немного.

В реализации можно использовать, например, Cassandra (которая традиционно считается АР базой данных).
В качестве языка программирования будет использован Go (Golang). Необходимо ли ставить перед ним nginx или нам хватит возможностей языка имеет смысл определить по результатам нагрузочного тестирования.
